{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.1.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\n// Load your modules here, e.g.:\nimport axios, { AxiosInstance } from \"axios\";\nimport https from \"https\";\nimport { DOMParser } from \"xmldom\";\nimport xpath from \"xpath\";\nimport { State } from \"./lib/State\";\nimport { StatesMapper } from \"./StatesMapper\";\n\nclass KostalPikoMpPlus extends utils.Adapter {\n    refreshInterval: any = undefined;\n    serverIpRegex = /^[A-Za-z0-9\\.]+$/;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"kostal-piko-mp-plus\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n        // Reset the connection indicator during startup\n        this.setState(\"info.connection\", false, true);\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via this.config:\n        this.log.debug(`config.serverIp: ${this.config.serverProtocol}`);\n        this.log.debug(`config.interval: ${this.config.serverIp}`);\n        this.log.debug(`config.serverIp: ${this.config.serverPort}`);\n        this.log.debug(`config.interval: ${this.config.interval}`);\n\n        if (!this.serverIpRegex.test(this.config.serverIp)) {\n            this.log.error(`Server IP/Host: ${this.config.serverIp} is invalid - example 192.168.0.1`);\n            return;\n        }\n\n        const serverBaseUrl = `${this.config.serverProtocol}://${this.config.serverIp}:${this.config.serverPort}`;\n\n        // Load states config\n        const states = StatesMapper.states;\n        this.generateMdStateTable(states);\n\n        const client = this.createClient(serverBaseUrl);\n\n        this.log.info(`axios client with base url ${serverBaseUrl} created`);\n        this.log.info(`init fetch states`);\n\n        await this.refreshMeasurements(client, states);\n\n        this.log.info(`starting auto refresh each ${this.config.interval} millis`);\n        this.refreshInterval = this.setInterval(async () => {\n            this.log.info(`refreshing states`);\n            await this.refreshMeasurements(client, states);\n        }, this.config.interval);\n    }\n\n    private createClient(serverBaseUrl: string): AxiosInstance {\n        return axios.create({\n            baseURL: `${serverBaseUrl}`,\n            timeout: 5000,\n            responseType: \"text\",\n            responseEncoding: \"utf8\",\n            httpsAgent: new https.Agent({\n                rejectUnauthorized: false,\n            }),\n        });\n    }\n\n    private async refreshMeasurements(client: AxiosInstance, states: State[]): Promise<void> {\n        const endpoint = \"/all.xml\";\n        try {\n            const { data, status } = await client.get(endpoint);\n            this.log.debug(`request to ${endpoint} with status ${status}`);\n            if (status == 200) {\n                this.setState(\"info.connection\", true, true);\n                const dom = new DOMParser().parseFromString(data);\n                await this.updateStates(dom, states);\n            } else {\n                this.log.error(`unexpected status code: ${status}`);\n            }\n        } catch (error) {\n            this.log.error(`set connection state to false and stop interval`);\n            this.setState(\"info.connection\", false, true);\n            this.clearInterval(this.refreshInterval);\n            if (axios.isAxiosError(error)) {\n                this.log.error(`error message: ${error.message} - ${error.response?.data}`);\n            } else {\n                this.log.error(`unexpected error: ${error}`);\n            }\n        }\n    }\n\n    private async updateStates(dom: Document, states: State[]): Promise<void> {\n        for (const s of states) {\n            let selectedValue = xpath.select1(s.xpathValue, dom);\n\n            let value: any;\n\n            if (selectedValue !== undefined) {\n                value = (<Attr>selectedValue).value;\n            }\n\n            let unit = null;\n            if (s.xpathUnit !== undefined) {\n                selectedValue = xpath.select1(s.xpathUnit, dom);\n                unit = (<Attr>selectedValue).value;\n            }\n\n            if (value !== undefined) {\n                this.log.debug(`found state ${s.id} - ${value}`);\n                const common: ioBroker.StateCommon = {\n                    name: s.name,\n                    type: s.type ? s.type : \"string\",\n                    read: s.read ? s.read : true,\n                    write: s.write ? s.write : false,\n                    role: s.role ? s.role : \"state\",\n                    unit: unit !== null ? unit : undefined,\n                };\n\n                await this.setObjectNotExistsAsync(s.id, {\n                    type: \"state\",\n                    common: common,\n                    native: {},\n                });\n\n                value = this.convertStringTo(value, common.type);\n\n                await this.setStateAsync(s.id, { val: value, ack: true });\n            } else {\n                this.log.debug(`${s.id} has no value so we ignore it`);\n            }\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.setState(\"info.connection\", false, true);\n            this.clearInterval(this.refreshInterval);\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    private convertStringTo(value: string, typeString: string | undefined): any {\n        this.log.debug(`try to convert ${value} to ${typeString}`);\n\n        let convertedValue: any;\n        if (typeString == \"number\") {\n            convertedValue = Number(value);\n        } else if (typeString == \"string\") {\n            convertedValue = value;\n        } else {\n            throw new Error(`unknown cast type - ${typeString}`);\n        }\n        return convertedValue;\n    }\n\n    private generateMdStateTable(states: State[]): void {\n        let table: string;\n        table = `\\n|Name|Id|Value Type|xPath|\\n`;\n        table = `${table}|---|---|---|---|\\n`;\n        states.forEach((e) => {\n            table = `${table}|${e.name}|${e.id}|${e.type ? e.type : \"string\"}|${e.xpathValue}|\\n`;\n        });\n        this.log.debug(`${table}`);\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new KostalPikoMpPlus(options);\n} else {\n    // otherwise start the instance directly\n    (() => new KostalPikoMpPlus())();\n}\n"],
  "mappings": "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",
  "names": []
}
